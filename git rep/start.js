/**
 * РАБОТА С Git
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 *
 * УСТАНОВКА:
 * 1) Скачать и установить Git (https://git-scm.com/download/win).
 * 2) Открыть "Git CMD" или "Git Bash".
 * 3) Изменить параметры Git:
 *      а) git config --global user.name "Nicolay Kudryavtsev"
 *      б) git config --global user.email something@gmail.com
 *
 *      ! Проверить все параметры можно командой "git config --list"
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 *
 * РАБОТА:
 *
 *      ! НАЖМИ "q", ЕСЛИ ЗАВИСЛО
 *
 * 1) Открыть Windows PowerShell. Полезные команды:
 *      - Переход в папку. "cd ~/Desktop"
 *      - Создать папку. "mkdir NewFolder"
 *      - Удалить папку. "rd NewFolder /s". /s - удалить дерево каталогов
 *      - Показать все файлы в папке. "ls"
 *      - Удалить файл. "del [путь]"
 * 2) Перейти в папку и написать "git init"
 *      - git log. Показывает все старые коммиты (и показывает их хеши).
 *      - get status. Показывает статус рабочего дерева.
 *      - git add "путь". Добавление файлов в staging area (Индекс).
 *          Подготовка файла (-ов) перед коммитом.
 *          "git add ." - добавление всех изменений в проекте в индекс.
 *      - git commit -m "сообщение". Из всех файлов в Индексе создается коммит.
 *          "-m" - сообщение о том, что поменялось
 *      - git checkout "имя ветки". Переход к определённой ветке проекта.
 *          Перезаписывает все файлы папки проекта содержимым Индекса
 *      - git checkout "имя хеша". Переход к определённой ветке проекта.
 *          Перезаписывает все файлы папки проекта содержимым Индекса
 *
 *      - git cat-file -t "часть хеша". Выводит тип объекта с указанным хэшем
 *      - git cat-file -p "часть хеша". Выводит содержимое этого объекта (со всеми хешами)
 *
 * ! HEAD - указатель на ветку (по умолчанию "main"). Ветка указывает
 *    на последнюю версию проекта (коммит), который находится в рабочей папке.
 *  HEAD -> Ветка -> Последний (текущий) коммит
 *
 *  ЕСТЬ 3 ТИПА ОБЪЕКТОВ:
 *  1) commit. Сама папка с проектом
 *  2) tree. Каталог с файлами и/или каталогами
 *  3) blob. Файл
 *
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * РАБОТА С ВЕТКАМИ
 * Команды:
 *      1) git branch "имя ветки". Создание ветки
 *      2) git checkout -b "имя новой ветки". Создать ветку и перейти в неё
 *          git checkout "имя ветки". Переход на ветку
 *      3) git branch. Отображает список всех веток локального репозитория
 *      4) git branch -m "новое имя ветки". Переименнование ТЕКУЩЕЙ ветки
 *      5) git branch -d "имя ветки". Удалить ветку
 *      6) git branch -a. Увидеть все ветки, включая ветки с удалённого репозитория
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * СЛИЯНИЕ ВЕТОК
 *      - git merge "имя ветки". Слияние текущей ветки с той, что после merge
 *          У объекта будет 2 родителя
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * УДАЛЁННЫЕ РЕПОЗИТОРИИ
 *      - git push. Загрузить изменения из локального репозитория в удалённым
 *      - git pull. Загрузить изменения из удалённого репозитория в локальный
 *      - git clone "url". Клонирование удалённого репозитория на компьютер
 *
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * СОЗДАНИЕ УДАЛЁННОГО РЕПОЗИТОРИЯ НА GitHub
 *
 *      ! Репозиторий на гитхабе уже создан
 *      ! origin - имя удалённого репозитория по-умолчанию (после клонирование)
 *  Шаги:
 *      - git remote add origin "URL". Подключение удалённого репозитория на локальном
 *      - git push -u origin "ветка". Загрузить изменения из текущей ветки в удалённую
 *          с созданием связи между ними.
 *      - Теперь локальный и удалённые репозитории могут взаимодействовать с
 *          помощью git push и git pull.
 */
console.log("Hello World!");